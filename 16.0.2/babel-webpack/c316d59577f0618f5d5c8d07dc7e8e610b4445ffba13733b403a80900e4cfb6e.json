{"ast":null,"code":"import { of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { STATUS } from '../models/todo.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nlet TodoService = /*#__PURE__*/(() => {\n  class TodoService {\n    constructor(http) {\n      this.http = http;\n      this.todos = [{\n        id: 1,\n        title: \"Beginners Node.js Todo\",\n        description: \"Level 1 Training \",\n        status: STATUS.NEW\n      }, {\n        id: 2,\n        title: \"Beginners C# Todo\",\n        description: \"Level 1 Training \",\n        status: STATUS.NEW\n      }, {\n        id: 3,\n        title: \"Beginners Java Todo\",\n        description: \"Level 1 Training \",\n        status: STATUS.NEW\n      }];\n    }\n    get(id) {\n      return of(this.todos).pipe(\n      // Use the map operator to transform the array into a single Todo object\n      map(todos => todos.find(todo => todo.id == id)));\n    }\n    getAll() {\n      return of(this.todos);\n    }\n    create(data) {\n      const newTodo = {\n        ...data,\n        id: this.todos.length + 1\n      };\n      this.todos.push(newTodo);\n      return of(newTodo);\n    }\n    update(id, data) {\n      const index = this.todos.findIndex(todo => todo.id === id);\n      if (index !== -1) {\n        const updatedTodo = {\n          ...this.todos[index],\n          ...data\n        };\n        this.todos[index] = updatedTodo;\n        return of(updatedTodo);\n      } else {\n        return of(null); // Return null if Todo with given id is not found\n      }\n    }\n\n    delete(id) {\n      const index = this.todos.findIndex(todo => todo.id === id);\n      if (index !== -1) {\n        const deletedTodo = this.todos.splice(index, 1)[0];\n        return of(deletedTodo); // Return the deleted Todo as an observable\n      } else {\n        return of(null); // Return null if Todo with given id is not found\n      }\n    }\n\n    deleteAll() {\n      const deletedTodos = this.todos.slice(); // Make a copy of the array\n      this.todos = []; // Clear the Todos array\n      return of(deletedTodos);\n    }\n    findByTitle(title) {\n      return of(this.todos).pipe(map(todoArray => todoArray.filter(todo => todo.title?.includes(title))));\n    }\n  }\n  TodoService.ɵfac = function TodoService_Factory(t) {\n    return new (t || TodoService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  TodoService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TodoService,\n    factory: TodoService.ɵfac,\n    providedIn: 'root'\n  });\n  return TodoService;\n})();\nexport { TodoService };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}