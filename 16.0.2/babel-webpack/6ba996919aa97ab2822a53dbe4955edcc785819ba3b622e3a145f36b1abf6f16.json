{"ast":null,"code":"import { of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst baseUrl = 'http://localhost:8080/api/tutorials';\nclass TutorialService {\n  constructor(http) {\n    this.http = http;\n    this.tutorials = [{\n      id: 1,\n      title: \"Beginners Node.js tutorial\",\n      description: \"Level 1 Training \"\n    }, {\n      id: 1,\n      title: \"Beginners Node.js tutorial\",\n      description: \"Level 1 Training \"\n    }, {\n      id: 2,\n      title: \"Beginners C# tutorial\",\n      description: \"Level 1 Training \"\n    }, {\n      id: 3,\n      title: \"Beginners Java tutorial\",\n      description: \"Level 1 Training \"\n    }];\n    this.tutorialsOb = of(this.tutorials);\n  }\n  getAll() {\n    return this.tutorialsOb;\n  }\n  get(id) {\n    return of(this.tutorials).pipe(\n    // Use the map operator to transform the array into a single Tutorial object\n    map(tutorialArray => tutorialArray.find(tutorial => tutorial.id === id)));\n  }\n  create(data) {\n    const newTutorial = {\n      ...data,\n      id: this.tutorials.length + 1\n    };\n    this.tutorials.push(newTutorial);\n    return of(newTutorial);\n  }\n  update(id, data) {\n    return this.http.put(`${baseUrl}/${id}`, data);\n  }\n  delete(id) {\n    return this.http.delete(`${baseUrl}/${id}`);\n  }\n  deleteAll() {\n    return this.http.delete(baseUrl);\n  }\n  findByTitle(title) {\n    return this.http.get(`${baseUrl}?title=${title}`);\n  }\n}\nTutorialService.ɵfac = function TutorialService_Factory(t) {\n  return new (t || TutorialService)(i0.ɵɵinject(i1.HttpClient));\n};\nTutorialService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: TutorialService,\n  factory: TutorialService.ɵfac,\n  providedIn: 'root'\n});\nexport { TutorialService };","map":{"version":3,"names":["of","map","baseUrl","TutorialService","constructor","http","tutorials","id","title","description","tutorialsOb","getAll","get","pipe","tutorialArray","find","tutorial","create","data","newTutorial","length","push","update","put","delete","deleteAll","findByTitle","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["D:\\source\\git\\Yog4Prog\\spring-boot-angular-16-crud-example\\angular-16-client\\src\\app\\services\\tutorial.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable, of } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { Tutorial } from '../models/tutorial.model';\r\n\r\nconst baseUrl = 'http://localhost:8080/api/tutorials';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class TutorialService {\r\n  constructor(private http: HttpClient) {}\r\n  \r\n  tutorials: Tutorial[] = [\r\n    {\r\n      id: 1,\r\n      title: \"Beginners Node.js tutorial\",\r\n      description: \"Level 1 Training \"\r\n    },\r\n    {\r\n      id: 1,\r\n      title: \"Beginners Node.js tutorial\",\r\n      description: \"Level 1 Training \"\r\n    },\r\n    {\r\n      id: 2,\r\n      title: \"Beginners C# tutorial\",\r\n      description: \"Level 1 Training \"\r\n    },\r\n    {\r\n      id: 3,\r\n      title: \"Beginners Java tutorial\",\r\n      description: \"Level 1 Training \"\r\n    },\r\n  ];\r\n  tutorialsOb: Observable<Tutorial[]> = of(this.tutorials);\r\n\r\n  getAll(): Observable<Tutorial[]> {\r\n    return this.tutorialsOb\r\n  }\r\n\r\n  get(id: any): Observable<Tutorial | undefined> {\r\n    return of(this.tutorials).pipe(\r\n      // Use the map operator to transform the array into a single Tutorial object\r\n      map((tutorialArray: Tutorial[]) => tutorialArray.find(tutorial => tutorial.id === id))\r\n    );\r\n  }\r\n\r\n  create(data: any): Observable<any> {\r\n    const newTutorial: Tutorial = { ...data, id: this.tutorials.length + 1 };\r\n    this.tutorials.push(newTutorial);\r\n    return of(newTutorial);\r\n  }\r\n\r\n  update(id: any, data: any): Observable<any> {\r\n    return this.http.put(`${baseUrl}/${id}`, data);\r\n  }\r\n\r\n  delete(id: any): Observable<any> {\r\n    return this.http.delete(`${baseUrl}/${id}`);\r\n  }\r\n\r\n  deleteAll(): Observable<any> {\r\n    return this.http.delete(baseUrl);\r\n  }\r\n\r\n  findByTitle(title: any): Observable<Tutorial[]> {\r\n    return this.http.get<Tutorial[]>(`${baseUrl}?title=${title}`);\r\n  }\r\n}\r\n"],"mappings":"AAEA,SAAqBA,EAAE,QAAQ,MAAM;AACrC,SAASC,GAAG,QAAQ,gBAAgB;;;AAGpC,MAAMC,OAAO,GAAG,qCAAqC;AAErD,MAGaC,eAAe;EAC1BC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAExB,KAAAC,SAAS,GAAe,CACtB;MACEC,EAAE,EAAE,CAAC;MACLC,KAAK,EAAE,4BAA4B;MACnCC,WAAW,EAAE;KACd,EACD;MACEF,EAAE,EAAE,CAAC;MACLC,KAAK,EAAE,4BAA4B;MACnCC,WAAW,EAAE;KACd,EACD;MACEF,EAAE,EAAE,CAAC;MACLC,KAAK,EAAE,uBAAuB;MAC9BC,WAAW,EAAE;KACd,EACD;MACEF,EAAE,EAAE,CAAC;MACLC,KAAK,EAAE,yBAAyB;MAChCC,WAAW,EAAE;KACd,CACF;IACD,KAAAC,WAAW,GAA2BV,EAAE,CAAC,IAAI,CAACM,SAAS,CAAC;EAxBjB;EA0BvCK,MAAMA,CAAA;IACJ,OAAO,IAAI,CAACD,WAAW;EACzB;EAEAE,GAAGA,CAACL,EAAO;IACT,OAAOP,EAAE,CAAC,IAAI,CAACM,SAAS,CAAC,CAACO,IAAI;IAC5B;IACAZ,GAAG,CAAEa,aAAyB,IAAKA,aAAa,CAACC,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACT,EAAE,KAAKA,EAAE,CAAC,CAAC,CACvF;EACH;EAEAU,MAAMA,CAACC,IAAS;IACd,MAAMC,WAAW,GAAa;MAAE,GAAGD,IAAI;MAAEX,EAAE,EAAE,IAAI,CAACD,SAAS,CAACc,MAAM,GAAG;IAAC,CAAE;IACxE,IAAI,CAACd,SAAS,CAACe,IAAI,CAACF,WAAW,CAAC;IAChC,OAAOnB,EAAE,CAACmB,WAAW,CAAC;EACxB;EAEAG,MAAMA,CAACf,EAAO,EAAEW,IAAS;IACvB,OAAO,IAAI,CAACb,IAAI,CAACkB,GAAG,CAAC,GAAGrB,OAAO,IAAIK,EAAE,EAAE,EAAEW,IAAI,CAAC;EAChD;EAEAM,MAAMA,CAACjB,EAAO;IACZ,OAAO,IAAI,CAACF,IAAI,CAACmB,MAAM,CAAC,GAAGtB,OAAO,IAAIK,EAAE,EAAE,CAAC;EAC7C;EAEAkB,SAASA,CAAA;IACP,OAAO,IAAI,CAACpB,IAAI,CAACmB,MAAM,CAACtB,OAAO,CAAC;EAClC;EAEAwB,WAAWA,CAAClB,KAAU;IACpB,OAAO,IAAI,CAACH,IAAI,CAACO,GAAG,CAAa,GAAGV,OAAO,UAAUM,KAAK,EAAE,CAAC;EAC/D;;AA1DWL,eAAe,C;mBAAfA,eAAe,EAAAwB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAf3B,eAAe,C;SAAfA,eAAe;EAAA4B,OAAA,EAAf5B,eAAe,CAAA6B,IAAA;EAAAC,UAAA,EAFd;AAAM;SAEP9B,eAAe"},"metadata":{},"sourceType":"module","externalDependencies":[]}