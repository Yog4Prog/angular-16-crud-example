{"ast":null,"code":"import { of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { STATUS } from '../models/todo.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nclass TodoService {\n  constructor(http) {\n    this.http = http;\n    this.todos = [{\n      id: 1,\n      title: \"Learn Beginners Node.js\",\n      description: \"Level 1 Training \",\n      status: STATUS.NEW\n    }, {\n      id: 2,\n      title: \"Learn C#\",\n      description: \"Level 1 Training \",\n      status: STATUS.NEW\n    }, {\n      id: 3,\n      title: \"Basic Java\",\n      description: \"Level 1 Training \",\n      status: STATUS.NEW\n    }, {\n      id: 4,\n      title: \"Beginners Python\",\n      description: \"Level 1 Training \",\n      status: STATUS.NEW\n    }];\n  }\n  get(id) {\n    return of(this.todos).pipe(\n    // Use the map operator to transform the array into a single Todo object\n    map(todos => todos.find(todo => todo.id == id)));\n  }\n  getAll() {\n    return of(this.todos);\n  }\n  create(data) {\n    const newTodo = {\n      ...data,\n      id: this.todos.length + 1\n    };\n    this.todos.push(newTodo);\n    return of(newTodo);\n  }\n  update(id, data) {\n    const index = this.todos.findIndex(todo => todo.id === id);\n    if (index !== -1) {\n      const updatedTodo = {\n        ...this.todos[index],\n        ...data\n      };\n      this.todos[index] = updatedTodo;\n      return of(updatedTodo);\n    } else {\n      return of(null); // Return null if Todo with given id is not found\n    }\n  }\n\n  delete(id) {\n    const index = this.todos.findIndex(todo => todo.id === id);\n    if (index !== -1) {\n      const deletedTodo = this.todos.splice(index, 1)[0];\n      return of(deletedTodo); // Return the deleted Todo as an observable\n    } else {\n      return of(null); // Return null if Todo with given id is not found\n    }\n  }\n\n  deleteAll() {\n    const deletedTodos = this.todos.slice(); // Make a copy of the array\n    this.todos = []; // Clear the Todos array\n    return of(deletedTodos);\n  }\n  findByTitle(title) {\n    return of(this.todos).pipe(map(todoArray => todoArray.filter(todo => todo.title?.includes(title))));\n  }\n}\nTodoService.ɵfac = function TodoService_Factory(t) {\n  return new (t || TodoService)(i0.ɵɵinject(i1.HttpClient));\n};\nTodoService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: TodoService,\n  factory: TodoService.ɵfac,\n  providedIn: 'root'\n});\nexport { TodoService };","map":{"version":3,"names":["of","map","STATUS","TodoService","constructor","http","todos","id","title","description","status","NEW","get","pipe","find","todo","getAll","create","data","newTodo","length","push","update","index","findIndex","updatedTodo","delete","deletedTodo","splice","deleteAll","deletedTodos","slice","findByTitle","todoArray","filter","includes","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["D:\\source\\git\\Yog4Prog\\spring-boot-angular-16-crud-example\\angular-16-client\\src\\app\\services\\todo.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable, of, throwError } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { STATUS, Todo } from '../models/todo.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class TodoService {\r\n  todos: Todo[]\r\n\r\n  constructor(private http: HttpClient) {\r\n    this.todos = [\r\n      {\r\n        id: 1,\r\n        title: \"Learn Beginners Node.js\",\r\n        description: \"Level 1 Training \",\r\n        status: STATUS.NEW\r\n      },\r\n      {\r\n        id: 2,\r\n        title: \"Learn C#\",\r\n        description: \"Level 1 Training \",\r\n        status: STATUS.NEW\r\n      },\r\n      {\r\n        id: 3,\r\n        title: \"Basic Java\",\r\n        description: \"Level 1 Training \",\r\n        status: STATUS.NEW\r\n      },\r\n      {\r\n        id: 4,\r\n        title: \"Beginners Python\",\r\n        description: \"Level 1 Training \",\r\n        status: STATUS.NEW\r\n      },\r\n\r\n    ];\r\n  }\r\n\r\n  get(id: number): Observable<any> {\r\n    return of(this.todos).pipe(\r\n      // Use the map operator to transform the array into a single Todo object\r\n      map(todos => todos.find(todo => todo.id == id))\r\n    );\r\n  }\r\n  getAll(): Observable<Todo[]> {\r\n    return of(this.todos);\r\n  }\r\n  create(data: any): Observable<any> {\r\n    const newTodo: Todo = { ...data, id: this.todos.length + 1 };\r\n    this.todos.push(newTodo);\r\n    return of(newTodo);\r\n  }\r\n  update(id: any, data: any): Observable<any> {\r\n    const index = this.todos.findIndex(todo => todo.id === id);\r\n    if (index !== -1) {\r\n      const updatedTodo: Todo = { ...this.todos[index], ...data };\r\n      this.todos[index] = updatedTodo;\r\n      return of(updatedTodo);\r\n    } else {\r\n      return of(null); // Return null if Todo with given id is not found\r\n    }\r\n  }\r\n\r\n  delete(id: any): Observable<any> {\r\n    const index = this.todos.findIndex(todo => todo.id === id);\r\n    if (index !== -1) {\r\n      const deletedTodo = this.todos.splice(index, 1)[0];\r\n      return of(deletedTodo); // Return the deleted Todo as an observable\r\n    } else {\r\n      return of(null); // Return null if Todo with given id is not found\r\n    }\r\n  }\r\n\r\n  deleteAll(): Observable<any> {\r\n    const deletedTodos = this.todos.slice(); // Make a copy of the array\r\n    this.todos = []; // Clear the Todos array\r\n    return of(deletedTodos);\r\n  }\r\n\r\n  findByTitle(title: any): Observable<Todo[]> {\r\n    return of(this.todos).pipe(\r\n      map((todoArray: Todo[]) => todoArray.filter(todo => todo.title?.includes(title))));\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}